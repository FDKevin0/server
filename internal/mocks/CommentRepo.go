// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/bangumi/server/internal/domain"
	mock "github.com/stretchr/testify/mock"

	model "github.com/bangumi/server/internal/model"
)

// CommentRepo is an autogenerated mock type for the CommentRepo type
type CommentRepo struct {
	mock.Mock
}

type CommentRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *CommentRepo) EXPECT() *CommentRepo_Expecter {
	return &CommentRepo_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx, commentType, id
func (_m *CommentRepo) Get(ctx context.Context, commentType domain.CommentType, id uint32) (model.Comment, error) {
	ret := _m.Called(ctx, commentType, id)

	var r0 model.Comment
	if rf, ok := ret.Get(0).(func(context.Context, domain.CommentType, uint32) model.Comment); ok {
		r0 = rf(ctx, commentType, id)
	} else {
		r0 = ret.Get(0).(model.Comment)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.CommentType, uint32) error); ok {
		r1 = rf(ctx, commentType, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CommentRepo_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type CommentRepo_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//  - ctx context.Context
//  - commentType domain.CommentType
//  - id uint32
func (_e *CommentRepo_Expecter) Get(ctx interface{}, commentType interface{}, id interface{}) *CommentRepo_Get_Call {
	return &CommentRepo_Get_Call{Call: _e.mock.On("Get", ctx, commentType, id)}
}

func (_c *CommentRepo_Get_Call) Run(run func(ctx context.Context, commentType domain.CommentType, id uint32)) *CommentRepo_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.CommentType), args[2].(uint32))
	})
	return _c
}

func (_c *CommentRepo_Get_Call) Return(_a0 model.Comment, _a1 error) *CommentRepo_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetCommentsByMentionedID provides a mock function with given fields: ctx, commentType, limit, offset, id
func (_m *CommentRepo) GetCommentsByMentionedID(ctx context.Context, commentType domain.CommentType, limit int, offset int, id uint32) (model.Comments, error) {
	ret := _m.Called(ctx, commentType, limit, offset, id)

	var r0 model.Comments
	if rf, ok := ret.Get(0).(func(context.Context, domain.CommentType, int, int, uint32) model.Comments); ok {
		r0 = rf(ctx, commentType, limit, offset, id)
	} else {
		r0 = ret.Get(0).(model.Comments)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.CommentType, int, int, uint32) error); ok {
		r1 = rf(ctx, commentType, limit, offset, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CommentRepo_GetCommentsByMentionedID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCommentsByMentionedID'
type CommentRepo_GetCommentsByMentionedID_Call struct {
	*mock.Call
}

// GetCommentsByMentionedID is a helper method to define mock.On call
//  - ctx context.Context
//  - commentType domain.CommentType
//  - limit int
//  - offset int
//  - id uint32
func (_e *CommentRepo_Expecter) GetCommentsByMentionedID(ctx interface{}, commentType interface{}, limit interface{}, offset interface{}, id interface{}) *CommentRepo_GetCommentsByMentionedID_Call {
	return &CommentRepo_GetCommentsByMentionedID_Call{Call: _e.mock.On("GetCommentsByMentionedID", ctx, commentType, limit, offset, id)}
}

func (_c *CommentRepo_GetCommentsByMentionedID_Call) Run(run func(ctx context.Context, commentType domain.CommentType, limit int, offset int, id uint32)) *CommentRepo_GetCommentsByMentionedID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.CommentType), args[2].(int), args[3].(int), args[4].(uint32))
	})
	return _c
}

func (_c *CommentRepo_GetCommentsByMentionedID_Call) Return(_a0 model.Comments, _a1 error) *CommentRepo_GetCommentsByMentionedID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type NewCommentRepoT interface {
	mock.TestingT
	Cleanup(func())
}

// NewCommentRepo creates a new instance of CommentRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCommentRepo(t NewCommentRepoT) *CommentRepo {
	mock := &CommentRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
