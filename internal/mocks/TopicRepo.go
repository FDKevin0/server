// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/bangumi/server/internal/domain"
	mock "github.com/stretchr/testify/mock"

	model "github.com/bangumi/server/internal/model"
)

// TopicRepo is an autogenerated mock type for the TopicRepo type
type TopicRepo struct {
	mock.Mock
}

type TopicRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *TopicRepo) EXPECT() *TopicRepo_Expecter {
	return &TopicRepo_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx, topicType, limit, offset, id
func (_m *TopicRepo) Get(ctx context.Context, topicType domain.TopicType, limit int, offset int, id uint32) (model.Topic, error) {
	ret := _m.Called(ctx, topicType, limit, offset, id)

	var r0 model.Topic
	if rf, ok := ret.Get(0).(func(context.Context, domain.TopicType, int, int, uint32) model.Topic); ok {
		r0 = rf(ctx, topicType, limit, offset, id)
	} else {
		r0 = ret.Get(0).(model.Topic)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.TopicType, int, int, uint32) error); ok {
		r1 = rf(ctx, topicType, limit, offset, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TopicRepo_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type TopicRepo_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//  - ctx context.Context
//  - topicType domain.TopicType
//  - limit int
//  - offset int
//  - id uint32
func (_e *TopicRepo_Expecter) Get(ctx interface{}, topicType interface{}, limit interface{}, offset interface{}, id interface{}) *TopicRepo_Get_Call {
	return &TopicRepo_Get_Call{Call: _e.mock.On("Get", ctx, topicType, limit, offset, id)}
}

func (_c *TopicRepo_Get_Call) Run(run func(ctx context.Context, topicType domain.TopicType, limit int, offset int, id uint32)) *TopicRepo_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.TopicType), args[2].(int), args[3].(int), args[4].(uint32))
	})
	return _c
}

func (_c *TopicRepo_Get_Call) Return(_a0 model.Topic, _a1 error) *TopicRepo_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetTopicsByObjectID provides a mock function with given fields: ctx, topicType, id
func (_m *TopicRepo) GetTopicsByObjectID(ctx context.Context, topicType domain.TopicType, id uint32) ([]model.Topic, error) {
	ret := _m.Called(ctx, topicType, id)

	var r0 []model.Topic
	if rf, ok := ret.Get(0).(func(context.Context, domain.TopicType, uint32) []model.Topic); ok {
		r0 = rf(ctx, topicType, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Topic)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.TopicType, uint32) error); ok {
		r1 = rf(ctx, topicType, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TopicRepo_GetTopicsByObjectID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTopicsByObjectID'
type TopicRepo_GetTopicsByObjectID_Call struct {
	*mock.Call
}

// GetTopicsByObjectID is a helper method to define mock.On call
//  - ctx context.Context
//  - topicType domain.TopicType
//  - id uint32
func (_e *TopicRepo_Expecter) GetTopicsByObjectID(ctx interface{}, topicType interface{}, id interface{}) *TopicRepo_GetTopicsByObjectID_Call {
	return &TopicRepo_GetTopicsByObjectID_Call{Call: _e.mock.On("GetTopicsByObjectID", ctx, topicType, id)}
}

func (_c *TopicRepo_GetTopicsByObjectID_Call) Run(run func(ctx context.Context, topicType domain.TopicType, id uint32)) *TopicRepo_GetTopicsByObjectID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.TopicType), args[2].(uint32))
	})
	return _c
}

func (_c *TopicRepo_GetTopicsByObjectID_Call) Return(_a0 []model.Topic, _a1 error) *TopicRepo_GetTopicsByObjectID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type NewTopicRepoT interface {
	mock.TestingT
	Cleanup(func())
}

// NewTopicRepo creates a new instance of TopicRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTopicRepo(t NewTopicRepoT) *TopicRepo {
	mock := &TopicRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
